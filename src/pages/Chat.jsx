import React, { useEffect, useRef, useState } from "react";
import Header from "../components/Header/Header";
import BottomNav from "../components/BottomNav/BottomNav";
import s from "./Chat.module.css";


const systemPrompt =
`–¢—ã ‚Äî —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Zaman Bank. –ü–æ–º–æ–≥–∞–π —Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏, 
–¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–∞—Ç–∞–º/–¥–æ—Ö–æ–¥–∞–º, –ø–æ–¥–±–∏—Ä–∞–π –ø—Ä–æ–¥—É–∫—Ç—ã –±–∞–Ω–∫–∞, 
–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∑–¥–æ—Ä–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –±–æ—Ä—å–±—ã —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.`;

export default function Chat(){
  const [messages, setMessages] = useState([
    { role:"assistant", content:"–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Zaman Bank. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?" }
  ]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const boxRef = useRef(null);
  const [listening, setListening] = useState(false);
  const recognitionRef = useRef(null);  

  useEffect(()=>{
    if (boxRef.current) boxRef.current.scrollTop = boxRef.current.scrollHeight;
  }, [messages, loading]);

  const startListening = () => {
    if (!("webkitSpeechRecognition" in window)) {
      alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥");
      return;
    }
  
    const recognition = new window.webkitSpeechRecognition();
    recognition.lang = "ru-RU";
    recognition.interimResults = false;
    recognition.continuous = false;
  
    recognition.onstart = () => setListening(true);
    recognition.onend = () => setListening(false);
    recognition.onerror = (e) => {
      console.error("Speech recognition error:", e);
      setListening(false);
    };
  
    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      setInput(transcript);
      setTimeout(ask, 500); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    };
  
    recognition.start();
    recognitionRef.current = recognition;
  };
  
  // 2Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
  const speak = (text) => {
    if (!window.speechSynthesis) return;
    const utter = new SpeechSynthesisUtterance(text);
    utter.lang = "ru-RU";
    utter.rate = 1;
    utter.pitch = 1;
    window.speechSynthesis.speak(utter);
  };
  
  // 3Ô∏è‚É£ –û–∑–≤—É—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    const last = messages[messages.length - 1];
    if (last?.role === "assistant") {
      speak(last.content);
    }
  }, [messages]);

  const ask = async () => {
    const text = input.trim();
    if (!text || loading) return;
    setInput("");
    const userMsg = { role: "user", content: text };
    setMessages((m) => [...m, userMsg]);
    setLoading(true);
  
    // –ò–º–∏—Ç–∏—Ä—É–µ–º ‚Äú—É–º–Ω—ã–π‚Äù –æ—Ç–≤–µ—Ç
    setTimeout(() => {
      let reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É Zaman Bank.";
      const t = text.toLowerCase();
  
      if (t.includes("—Ü–µ–ª—å") || t.includes("–Ω–∞–∫–æ–ø–∏—Ç—å"))
        reply = "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞ 3 –≥–æ–¥–∞. –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω!";
      else if (t.includes("–∫—ç—à–±—ç–∫") || t.includes("cashback"))
        reply = "–ö—ç—à–±—ç–∫ –¥–æ 5% –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: –ê–ó–°, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –ø–æ–∫—É–ø–∫–∏. –í—Å—ë —á–µ—Å—Ç–Ω–æ!";
      else if (t.includes("—Ä–∞—Å—Ö–æ–¥") || t.includes("–¥–æ—Ö–æ–¥"))
        reply = "–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤ –Ω–æ—Ä–º–µ, –Ω–æ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã –Ω–∞ –∫–∞—Ñ–µ –∏ —Ç–∞–∫—Å–∏ üòâ";
      else if (t.includes("—Å—Ç—Ä–µ—Å—Å"))
        reply = "–†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≥—É–ª–∫—É, –¥—ã—Ö–∞–Ω–∏–µ –∏–ª–∏ —á—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤–º–µ—Å—Ç–æ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üíÜ‚Äç‚ôÄÔ∏è";
  
      setMessages((m) => [...m, { role: "assistant", content: reply }]);
      setLoading(false);
    }, 1000);
  };
  

  const quick = (q) => { setInput(q); setTimeout(ask, 0); };

  return (
    <div className="page">
      <Header title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞" />
      <div className={s.header}>
        <div className={s.botAvatar}><i className="fas fa-robot" /></div>
        <div className={s.title}>–ö–≤–∞–Ω—Ç—É–º-–ø–æ–º–æ—â–Ω–∏–∫</div>
        <div className={s.subtitle}>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è —Ä—è–¥–æ–º</div>
      </div>

      <div ref={boxRef} className={s.chatBox}>
        {/* –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ */}
        {messages.length === 1 && (
          <div className={`${s.msg} ${s.bot}`}>
            –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Ü–µ–ª–∏, –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤, –∫—ç—à–±—ç–∫ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –±–∞–Ω–∫–∞.
            <div className={s.time}>—Å–µ–π—á–∞—Å</div>
            <div className={s.quick}>
              <button onClick={()=>quick("–•–æ—á—É –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞ 3 –≥–æ–¥–∞, –¥–æ—Ö–æ–¥ 450k, —Ç—Ä–∞—Ç—ã 300k")}>–§–∏–Ω. —Ü–µ–ª—å</button>
              <button onClick={()=>quick("–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã –∫–∞–∫ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç—Ä–∞—Ç—ã")}>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</button>
              <button onClick={()=>quick("–ß—Ç–æ –ø–æ –∫—ç—à–±—ç–∫—É –∏ –≤—ã–≥–æ–¥–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º –±–∞–Ω–∫–∞?")}>–ü—Ä–æ–¥—É–∫—Ç—ã</button>
              <button onClick={()=>quick("–Ø —Å—Ç—Ä–µ—Å—Å—É—é –∏ —Ç—Ä–∞—á—É –ª–∏—à–Ω–µ–µ ‚Äî –ø–æ–º–æ–≥–∏")}>–ê–Ω—Ç–∏-—Å—Ç—Ä–µ—Å—Å</button>
            </div>
          </div>
        )}

        {messages.map((m, i)=>(
          <div key={i} className={`${s.msg} ${m.role==="user" ? s.user : s.bot}`}>
            {m.content}
          </div>
        ))}

        {loading && (
          <div className={s.typing}>
            <div className={s.dot}></div><div className={s.dot}></div><div className={s.dot}></div>
          </div>
        )}
      </div>

      <div className={s.inputBar}>
      <button onClick={startListening} className={s.micBtn}>
    <i className={`fas fa-microphone ${listening ? s.micActive : ""}`} />
  </button>
        <input
          value={input}
          onChange={e=>setInput(e.target.value)}
          onKeyDown={e=>e.key==="Enter" && ask()}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶"
        />
        
        <button onClick={ask}><i className="fas fa-paper-plane" /></button>
      </div>

      <BottomNav active="chat" />
    </div>
  );
}
