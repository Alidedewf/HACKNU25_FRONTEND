import React, { useEffect, useRef, useState } from "react";
import Header from "../components/Header/Header";
import BottomNav from "../components/BottomNav/BottomNav";
import s from "./Chat.module.css";

const systemPrompt = `
–¢—ã ‚Äî —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Zaman Bank. 
–ü–æ–º–æ–≥–∞–π —Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã, 
–ø–æ–¥–±–∏—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –±–∞–Ω–∫–∞, –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –±–æ—Ä—å–±—ã —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º. 
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Å —ç–º–ø–∞—Ç–∏–µ–π.`;

export default function Chat() {
  const [messages, setMessages] = useState([
    { role: "assistant", content: "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Zaman Bank. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?" },
  ]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const boxRef = useRef(null);
  const [listening, setListening] = useState(false);
  const recognitionRef = useRef(null);

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
  useEffect(() => {
    if (boxRef.current) boxRef.current.scrollTop = boxRef.current.scrollHeight;
  }, [messages, loading]);

  // ====== –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ ======
  const startListening = () => {
    if (!("webkitSpeechRecognition" in window)) {
      alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥");
      return;
    }

    const recognition = new window.webkitSpeechRecognition();
    recognition.lang = "ru-RU";
    recognition.interimResults = false;
    recognition.continuous = false;

    recognition.onstart = () => setListening(true);
    recognition.onend = () => setListening(false);
    recognition.onerror = (e) => {
      console.error("Speech recognition error:", e);
      setListening(false);
    };

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      setInput(transcript);
      setTimeout(ask, 500);
    };

    recognition.start();
    recognitionRef.current = recognition;
  };

  // ====== –û–∑–≤—É—á–∫–∞ ======
  const speak = (text) => {
    if (!window.speechSynthesis) return;
    const utter = new SpeechSynthesisUtterance(text);
    utter.lang = "ru-RU";
    utter.rate = 1;
    utter.pitch = 1;
    window.speechSynthesis.speak(utter);
  };

  // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    const last = messages[messages.length - 1];
    if (last?.role === "assistant") {
      speak(last.content);
    }
  }, [messages]);

  // ====== –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ======
  const ask = async () => {
    const text = input.trim();
    if (!text || loading) return;
    setInput("");
    const userMsg = { role: "user", content: text };
    setMessages((m) => [...m, userMsg]);
    setLoading(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–≤–æ–π backend
      const res = await fetch("https://gogogo-pz1p.onrender.com/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          prompt: `${systemPrompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${text}`,
        }),
      });

      if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ API: ${res.status}`);
      const data = await res.json();

      const reply = data.response || "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç.";
      setMessages((m) => [...m, { role: "assistant", content: reply }]);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API:", err);
      setMessages((m) => [
        ...m,
        { role: "assistant", content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É üòî" },
      ]);
    } finally {
      setLoading(false);
    }
  };

  const quick = (q) => {
    setInput(q);
    setTimeout(ask, 0);
  };

  return (
    <div className="page">
      <Header title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞" />

      <div className={s.header}>
        <div className={s.botAvatar}><i className="fas fa-robot" /></div>
        <div className={s.title}>–ö–≤–∞–Ω—Ç—É–º-–ø–æ–º–æ—â–Ω–∏–∫</div>
        <div className={s.subtitle}>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è —Ä—è–¥–æ–º</div>
      </div>

      <div ref={boxRef} className={s.chatBox}>
        {/* –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ */}
        {messages.length === 1 && (
          <div className={`${s.msg} ${s.bot}`}>
            –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Ü–µ–ª–∏, –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤, –∫—ç—à–±—ç–∫ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –±–∞–Ω–∫–∞.
            <div className={s.time}>—Å–µ–π—á–∞—Å</div>
            <div className={s.quick}>
              <button onClick={() => quick("–•–æ—á—É –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞ 3 –≥–æ–¥–∞, –¥–æ—Ö–æ–¥ 450k, —Ç—Ä–∞—Ç—ã 300k")}>
                –§–∏–Ω. —Ü–µ–ª—å
              </button>
              <button onClick={() => quick("–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã –∫–∞–∫ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç—Ä–∞—Ç—ã")}>
                –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
              </button>
              <button onClick={() => quick("–ß—Ç–æ –ø–æ –∫—ç—à–±—ç–∫—É –∏ –≤—ã–≥–æ–¥–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º –±–∞–Ω–∫–∞?")}>
                –ü—Ä–æ–¥—É–∫—Ç—ã
              </button>
              <button onClick={() => quick("–Ø —Å—Ç—Ä–µ—Å—Å—É—é –∏ —Ç—Ä–∞—á—É –ª–∏—à–Ω–µ–µ ‚Äî –ø–æ–º–æ–≥–∏")}>
                –ê–Ω—Ç–∏-—Å—Ç—Ä–µ—Å—Å
              </button>
            </div>
          </div>
        )}

        {messages.map((m, i) => (
          <div key={i} className={`${s.msg} ${m.role === "user" ? s.user : s.bot}`}>
            {m.content}
          </div>
        ))}

        {loading && (
          <div className={s.typing}>
            <div className={s.dot}></div>
            <div className={s.dot}></div>
            <div className={s.dot}></div>
          </div>
        )}
      </div>

      <div className={s.inputBar}>
        <button onClick={startListening} className={s.micBtn}>
          <i className={`fas fa-microphone ${listening ? s.micActive : ""}`} />
        </button>
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && ask()}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶"
        />
        <button onClick={ask}><i className="fas fa-paper-plane" /></button>
      </div>

      <BottomNav active="chat" />
    </div>
  );
}
